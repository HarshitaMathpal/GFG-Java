class Solution
{
    static int mod=1000000007;
    long numberOfPaths(int m, int n)
    {
        // code here
        long[][] dp = new long[101][101];
        for(long[] row:dp)
        Arrays.fill(row,-1);
        return paths(m-1,n-1,0,0,dp);
        
    }
    static long paths(int m,int n,int currrow,int currcol,long[][] dp){
        if(currrow > m && currcol > n){
            return 0;
        }
        if(currrow == m && currcol == n){
            return 1;
        }
        if(dp[currrow][currcol] != -1){
            return dp[currrow][currcol];
        }
        
        long down=0, right=0;
        if(currrow < m)
        down = paths(m,n,currrow+1,currcol,dp)%mod;
        
        if(currcol < n)
        right = paths(m,n,currrow,currcol+1,dp)%mod;
        
        return dp[currrow][currcol] = (down+right)%mod;
    }
}
